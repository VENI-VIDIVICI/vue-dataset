{"version":3,"file":"vue-dataset.umd.min.js","sources":["../src/Dataset.vue","../node_modules/vue-runtime-helpers/dist/normalize-component.mjs"],"sourcesContent":["<template>\r\n  <div>\r\n    <slot :ds=\"{ dsShowEntries, dsResultsNumber, dsPage, dsPagecount, dsFrom, dsTo, dsData, dsRows, dsPages }\"></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// Sorting method\r\nfunction compare (a, b) {\r\n  if (a > b) {\r\n    return 1;\r\n  }\r\n  if (a < b) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Search method that also takes into account transformations needed\r\nfunction findAny (dsSearchIn, dsSearchAs, obj, str) {\r\n  // Convert the search string to lower case.\r\n  str = str.toLowerCase();\r\n  for (var key in obj) {\r\n    if (dsSearchIn.length === 0 || dsSearchIn.indexOf(key) !== -1) {\r\n      var value = String(obj[key]).toLowerCase();\r\n      for (var field in dsSearchAs) {\r\n        if (field === key) {\r\n          // Found key in dsSearchAs so we pass the value and the search string to a search function\r\n          // that returns true/false and we return that if true.\r\n          /* Check if dsSearchAs was passed as string from template, if so call apropriate function from component */\r\n          if (typeof dsSearchAs[field] === 'string') {\r\n            const res = this[dsSearchAs[field]](value, str);\r\n            if (res === true) {\r\n              return res;\r\n            }\r\n            /* Check if dsSearchAs is a function(passed from template) */\r\n          }\r\n          if (typeof dsSearchAs[field] === 'function') {\r\n            const res = dsSearchAs[field](value, str);\r\n            if (res === true) {\r\n              return res;\r\n            }\r\n          }\r\n        }\r\n      }\r\n      // If it doesn't return from above we make a simple search\r\n      if (value.indexOf(str) >= 0) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n  return false;\r\n}\r\n\r\nexport default {\r\n  provide () {\r\n    return {\r\n      search: (value) => {\r\n        this.dsSearch = value;\r\n      },\r\n      showEntries: (value) => {\r\n        this.dsShowEntries = value;\r\n      },\r\n      setActive: (value) => {\r\n        this.setActive(value);\r\n      }\r\n    };\r\n  },\r\n  props: {\r\n    dsData: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    dsFilterFields: {\r\n      type: Object,\r\n      default: () => {}\r\n    },\r\n    dsSortby: {\r\n      type: String,\r\n      default: ''\r\n    },\r\n    dsSearchIn: {\r\n      type: Array,\r\n      default: () => []\r\n    },\r\n    dsSearchAs: {\r\n      type: Object,\r\n      default: () => {}\r\n    }\r\n  },\r\n  data: function () {\r\n    return {\r\n      dsShowEntries: 10,\r\n      dsPage: 1,\r\n      dsSearch: ''\r\n    };\r\n  },\r\n  computed: {\r\n    /*\r\n    The naive attempt would be to manipulate the original array directly.\r\n    This is problematic because it have to be filtered first, then sorted, then the from/to rows extracted.\r\n    In order to do that in that order, you would need to work on a copy.\r\n    But this is problematic as well since you'd loose the data-binding with the original array.\r\n\r\n    The trick is to work directly on the array indexes.\r\n    */\r\n    indexes: function () {\r\n      var result = [];\r\n      var dsData = this.dsData || [];\r\n      var dsSearch = this.dsSearch;\r\n      var dsSortby = this.dsSortby;\r\n      var dsFilterFields = this.dsFilterFields;\r\n      var dsSearchIn = this.dsSearchIn;\r\n      var dsSearchAs = this.dsSearchAs;\r\n\r\n      if (!dsSearch && !dsSortby && (!dsFilterFields || Object.keys(dsFilterFields).length === 0)) {\r\n        // just get the indexes\r\n        result = dsData.map(function (val, i) {\r\n          return i;\r\n        });\r\n      } else {\r\n        // Index it\r\n        result = dsData.map(function (val, i) {\r\n          return {\r\n            index: i,\r\n            value: val\r\n          };\r\n        });\r\n        // Filter it by field\r\n        for (var filterKey in dsFilterFields) {\r\n          // console.log(filterKey+' -> '+dsFilterFields[filterKey]);\r\n          result = result.filter(function (entry) {\r\n            var entryValue = entry.value;\r\n            for (var entryKey in entryValue) {\r\n              if (entryKey === filterKey) {\r\n                if (dsFilterFields[filterKey] === '') {\r\n                  return true;\r\n                }\r\n                if (entryValue[entryKey] === dsFilterFields[filterKey]) {\r\n                  return true;\r\n                }\r\n              }\r\n            }\r\n            return false;\r\n          });\r\n        }\r\n        // Search it\r\n        if (dsSearch) {\r\n          result = result.filter(function (entry) {\r\n            return findAny.call(this, dsSearchIn, dsSearchAs, entry.value, dsSearch);\r\n          }.bind(this));\r\n        }\r\n        // Sort it\r\n        if (dsSortby) {\r\n          var reverse = (dsSortby.charAt(0) === '-');\r\n          if (!reverse) {\r\n            result = result.sort(function (a, b) {\r\n              return compare(a.value[dsSortby], b.value[dsSortby]);\r\n            });\r\n          } else {\r\n            dsSortby = dsSortby.substr(1);\r\n            result = result.sort(function (b, a) {\r\n              return compare(a.value[dsSortby], b.value[dsSortby]);\r\n            });\r\n          }\r\n        }\r\n        // We need indexes only\r\n        result = result.map(function (entry) {\r\n          return entry.index;\r\n        });\r\n      }\r\n\r\n      // console.log('update');\r\n      // console.log(result);\r\n      return result;\r\n    },\r\n    dsRows: function () {\r\n      // Cannot modify another computed property from inside a computed property\r\n      // This should be moved into the dsTo computed if needed\r\n      /*\r\n      if (this.dsTo <= 0) {\r\n        this.dsTo = this.indexes.length;\r\n      }\r\n      */\r\n      // console.log(this.indexes);\r\n      return this.indexes.slice(this.dsFrom, this.dsTo);\r\n    },\r\n    dsPages: function () {\r\n      var currentPage = this.dsPage;\r\n      var nrOfPages = this.dsPagecount;\r\n      var delta = 2;\r\n      var range = [];\r\n      var rangeWithDots = [];\r\n      var l;\r\n\r\n      range.push(1);\r\n\r\n      if (nrOfPages <= 1) {\r\n        return range;\r\n      }\r\n\r\n      for (var i = currentPage - delta; i <= currentPage + delta; i++) {\r\n        if (i < nrOfPages && i > 1) {\r\n          range.push(i);\r\n        }\r\n      }\r\n      range.push(nrOfPages);\r\n\r\n      for (var j = 0; j < range.length; j++) {\r\n        if (l) {\r\n          if (range[j] - l === 2) {\r\n            rangeWithDots.push(l + 1);\r\n          } else if (range[j] - l !== 1) {\r\n            rangeWithDots.push('...');\r\n          }\r\n        }\r\n        rangeWithDots.push(range[j]);\r\n        l = range[j];\r\n      }\r\n      return rangeWithDots;\r\n    },\r\n    dsResultsNumber: function () {\r\n      return this.indexes.length;\r\n    },\r\n    dsPagecount: function () {\r\n      return Math.ceil(this.dsResultsNumber / this.dsShowEntries);\r\n    },\r\n    dsFrom: function () {\r\n      return (this.dsPage - 1) * this.dsShowEntries;\r\n    },\r\n    dsTo: function () {\r\n      return this.dsPage * this.dsShowEntries;\r\n    }\r\n  },\r\n  watch: {\r\n    dsData: {\r\n      handler: function (val, oldVal) {\r\n        // Reset active page when data changes\r\n        this.setActive(1);\r\n      }\r\n    }\r\n  },\r\n  methods: {\r\n    setActive (value) {\r\n      this.dsPage = value;\r\n    }\r\n  }\r\n};\r\n</script>\r\n","function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier /* server only */, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\r\n    if (typeof shadowMode !== 'boolean') {\r\n        createInjectorSSR = createInjector;\r\n        createInjector = shadowMode;\r\n        shadowMode = false;\r\n    }\r\n    // Vue.extend constructor export interop.\r\n    const options = typeof script === 'function' ? script.options : script;\r\n    // render functions\r\n    if (template && template.render) {\r\n        options.render = template.render;\r\n        options.staticRenderFns = template.staticRenderFns;\r\n        options._compiled = true;\r\n        // functional template\r\n        if (isFunctionalTemplate) {\r\n            options.functional = true;\r\n        }\r\n    }\r\n    // scopedId\r\n    if (scopeId) {\r\n        options._scopeId = scopeId;\r\n    }\r\n    let hook;\r\n    if (moduleIdentifier) {\r\n        // server build\r\n        hook = function (context) {\r\n            // 2.3 injection\r\n            context =\r\n                context || // cached call\r\n                    (this.$vnode && this.$vnode.ssrContext) || // stateful\r\n                    (this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext); // functional\r\n            // 2.2 with runInNewContext: true\r\n            if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\r\n                context = __VUE_SSR_CONTEXT__;\r\n            }\r\n            // inject component styles\r\n            if (style) {\r\n                style.call(this, createInjectorSSR(context));\r\n            }\r\n            // register component module identifier for async chunk inference\r\n            if (context && context._registeredComponents) {\r\n                context._registeredComponents.add(moduleIdentifier);\r\n            }\r\n        };\r\n        // used by ssr in case component is cached and beforeCreate\r\n        // never gets called\r\n        options._ssrRegister = hook;\r\n    }\r\n    else if (style) {\r\n        hook = shadowMode\r\n            ? function (context) {\r\n                style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));\r\n            }\r\n            : function (context) {\r\n                style.call(this, createInjector(context));\r\n            };\r\n    }\r\n    if (hook) {\r\n        if (options.functional) {\r\n            // register for functional component in vue file\r\n            const originalRender = options.render;\r\n            options.render = function renderWithStyleInjection(h, context) {\r\n                hook.call(context);\r\n                return originalRender(h, context);\r\n            };\r\n        }\r\n        else {\r\n            // inject component registration as beforeCreate hook\r\n            const existing = options.beforeCreate;\r\n            options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\r\n        }\r\n    }\r\n    return script;\r\n}\n\nexport default normalizeComponent;\n//# sourceMappingURL=normalize-component.mjs.map\n"],"names":["normalizeComponent","template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","const","hook","options","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat"],"mappings":"iMAQA,sCAWA,2TCnBA,SAASA,EAAmBC,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAAoCC,EAAYC,EAAgBC,EAAmBC,GACzI,kBAAfH,IACPE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAGjBI,IAeIC,EAfEC,EAA4B,mBAAXV,EAAwBA,EAAOU,QAAUV,EAkDhE,GAhDIF,GAAYA,EAASa,SACrBD,EAAQC,OAASb,EAASa,OAC1BD,EAAQE,gBAAkBd,EAASc,gBACnCF,EAAQG,WAAY,EAEhBX,IACAQ,EAAQI,YAAa,IAIzBb,IACAS,EAAQK,SAAWd,GAGnBE,GAEAM,EAAO,SAAUO,IAEbA,EACIA,GACKC,KAAKC,QAAUD,KAAKC,OAAOC,YAC3BF,KAAKG,QAAUH,KAAKG,OAAOF,QAAUD,KAAKG,OAAOF,OAAOC,aAElB,oBAAxBE,sBACnBL,EAAUK,qBAGVtB,GACAA,EAAMuB,KAAKL,KAAMX,EAAkBU,IAGnCA,GAAWA,EAAQO,uBACnBP,EAAQO,sBAAsBC,IAAIrB,IAK1CO,EAAQe,aAAehB,GAElBV,IACLU,EAAOL,EACD,SAAUY,GACRjB,EAAMuB,KAAKL,KAAMV,EAAqBS,EAASC,KAAKS,MAAMC,SAASC,cAErE,SAAUZ,GACRjB,EAAMuB,KAAKL,KAAMZ,EAAeW,MAGxCP,EACA,GAAIC,EAAQI,WAAY,CAEpBN,IAAMqB,EAAiBnB,EAAQC,OAC/BD,EAAQC,OAAS,SAAkCmB,EAAGd,GAElD,OADAP,EAAKa,KAAKN,GACHa,EAAeC,EAAGd,QAG5B,CAEDR,IAAMuB,EAAWrB,EAAQsB,aACzBtB,EAAQsB,aAAeD,EAAW,GAAGE,OAAOF,EAAUtB,GAAQ,CAACA,GAGvE,OAAOT,EDtEXQ"}